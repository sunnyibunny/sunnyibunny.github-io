<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/10/29/%E9%93%BE%E8%A1%A8LinkList/"/>
    <url>/2023/10/29/%E9%93%BE%E8%A1%A8LinkList/</url>
    
    <content type="html"><![CDATA[<h1 id="链表LinkList"><a href="#链表LinkList" class="headerlink" title="链表LinkList"></a>链表LinkList</h1><hr><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span>;<br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkNode</span><br>    &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span>&lt;T&gt;;<br>        T data;<br>        LinkNode&lt;T&gt;* next;<br>        <span class="hljs-built_in">LinkNode</span>&lt;T&gt;(T d):<span class="hljs-built_in">data</span>(d),<span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>)&#123;&#125;<br>    &#125;;<br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span><br>    &#123;<br>    <span class="hljs-keyword">public</span>:<br>        LinkNode&lt;T&gt;* head;<br>        <span class="hljs-built_in">LinkList</span>&lt;T&gt;()&#123;head  = <span class="hljs-keyword">new</span> <span class="hljs-built_in">LinkNode</span>&lt;T&gt;(<span class="hljs-number">-1</span>);&#125;<span class="hljs-comment">//构造函数一定要赋初值，否则运用时head-&gt;next为空会报错</span><br>        ~<span class="hljs-built_in">LinkList</span>&lt;T&gt;();<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>    LinkList&lt;T&gt;::~<span class="hljs-built_in">LinkList</span>&lt;T&gt;()<br>    &#123;<br>        LinkNode&lt;T&gt;* p1,*p2;<br>        p1 = head,p2 = head -&gt; next;<br>        <span class="hljs-keyword">while</span>(p2 != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">delete</span> p1;<br>            p1 = p2;<br>            p2 = p2 -&gt; next;<br>        &#125;<br>        <span class="hljs-keyword">delete</span> p1;<span class="hljs-comment">//不要忘记释放最后一个</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="整体建立单链表-—void-CreateList"><a href="#整体建立单链表-—void-CreateList" class="headerlink" title="整体建立单链表 —void CreateList( )"></a>整体建立单链表 —void CreateList( )</h4><p><font color = fledspar>可以根据题目实际需求合理使用头插法和尾插法</font></p><ul><li><p>头插法:生成的链表是反序的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>  <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>  <span class="hljs-type">void</span> LinkList&lt;T&gt;:: <span class="hljs-built_in">CreateListF</span>(T a[],<span class="hljs-type">int</span> n)<span class="hljs-comment">//如果要按顺序删除则使用尾插法较合理</span><br>  &#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)<br>      &#123;<br>          LinkNode&lt;T&gt;* s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">LinkNode</span>&lt;T&gt;(a[i]);<br>          s -&gt; next = head -&gt; next;<br>          head -&gt; next = s;<br>      &#125;<br>  &#125;<br><br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>尾插法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateListR</span><span class="hljs-params">(T a[],<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">  </span>&#123;<br>      LinkNode&lt;T&gt; * s,* r;<br>      r = head;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)<br>      &#123;<br>          s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">LinkNode</span>&lt;T&gt;(a[i]);<br>          r -&gt; next = s;<br>          r = s;<br>      &#125;<br>      r -&gt; next = <span class="hljs-literal">NULL</span>；<span class="hljs-comment">//不要忘记尾部指针置空</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="返回序号为i的节点—LinkNode-geti-int-i"><a href="#返回序号为i的节点—LinkNode-geti-int-i" class="headerlink" title="返回序号为i的节点—LinkNode* geti(int i)"></a>返回序号为i的节点—LinkNode<T>* geti(int i)</h4><p>注意判断i的合法性</p><h4 id="将元素e的节点添加到单链表末尾—void-Add-e"><a href="#将元素e的节点添加到单链表末尾—void-Add-e" class="headerlink" title="将元素e的节点添加到单链表末尾—void Add(e)"></a>将元素e的节点添加到单链表末尾—void Add(e)</h4><h4 id="求单链表的长度—int-GetLength"><a href="#求单链表的长度—int-GetLength" class="headerlink" title="求单链表的长度—int GetLength()"></a>求单链表的长度—int GetLength()</h4><h4 id="求单链表中序号为i的结点值—bool-GetElem-int-i-T-amp-e"><a href="#求单链表中序号为i的结点值—bool-GetElem-int-i-T-amp-e" class="headerlink" title="求单链表中序号为i的结点值—bool GetElem(int i,T&amp; e);"></a>求单链表中序号为i的结点值—bool GetElem(int i,T&amp; e);</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(<span class="hljs-type">int</span> i,T&amp; e)</span></span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      LinkNode&lt;T&gt; * p = <span class="hljs-built_in">geti</span>(i);<br>      <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span>)<br>      &#123;<br>          e = p -&gt; data;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="设置单链表中序号为i的结点值—bool-SetElem（int-i-T-e"><a href="#设置单链表中序号为i的结点值—bool-SetElem（int-i-T-e" class="headerlink" title="设置单链表中序号为i的结点值—bool SetElem（int i,T e)"></a>设置单链表中序号为i的结点值—bool SetElem（int i,T e)</h4><h4 id="求单链表中第一个值为e的结点的序号—int-GetNo-T-e"><a href="#求单链表中第一个值为e的结点的序号—int-GetNo-T-e" class="headerlink" title="求单链表中第一个值为e的结点的序号—int GetNo(T e)"></a>求单链表中第一个值为e的结点的序号—int GetNo(T e)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetNo</span><span class="hljs-params">(T e)</span></span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>      LinkNode&lt;T&gt; *p = head-&gt;next;<br>      <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp;   p -&gt; data != e)<br>      &#123;<br>          j ++;<br>          p = p -&gt; next;<br>      &#125;<br>      <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">else</span><br>          <span class="hljs-keyword">return</span> j;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="插入元素e作为第i个结点—bool-Insert（int-i-T-e）"><a href="#插入元素e作为第i个结点—bool-Insert（int-i-T-e）" class="headerlink" title="插入元素e作为第i个结点—bool Insert（int i,T e）"></a>插入元素e作为第i个结点—bool Insert（int i,T e）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i,T e)</span></span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      LinkNode&lt;T&gt;* p = <span class="hljs-built_in">geti</span>(i - <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span>)<br>      &#123;<br>          LinkNode&lt;T&gt;* s = <span class="hljs-keyword">new</span> LinkNode&lt;T&gt; e;<br>          s -&gt; next = p -&gt; next;<br>          p -&gt; next = s;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除序号为i的结点—bool-Delete（int-i"><a href="#删除序号为i的结点—bool-Delete（int-i" class="headerlink" title="删除序号为i的结点—bool Delete（int i)"></a>删除序号为i的结点—bool Delete（int i)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>  <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>  <span class="hljs-type">bool</span> LinkList&lt;T&gt;::<span class="hljs-built_in">Delete</span>(<span class="hljs-type">int</span> n)<br>  &#123;<br>      <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      LinkNode&lt;T&gt;* p1 = <span class="hljs-built_in">get</span>(n - <span class="hljs-number">1</span>);<br><br>      <span class="hljs-keyword">if</span>(p1 != <span class="hljs-literal">NULL</span>)<br>      &#123;<br>          LinkNode&lt;T&gt;* p2 = p1 -&gt; next;<br>          <span class="hljs-keyword">if</span>(p2 != <span class="hljs-literal">NULL</span>)<br>          &#123;<br>              p1 -&gt; next = p2 -&gt; next;<br>              <span class="hljs-keyword">delete</span> p2;<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>          &#125;<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>          <br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      <br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="输出所有结点值—void-DispList（）"><a href="#输出所有结点值—void-DispList（）" class="headerlink" title="输出所有结点值—void DispList（）"></a>输出所有结点值—void DispList（）</h4><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="查找中间元素"><a href="#查找中间元素" class="headerlink" title="查找中间元素"></a>查找中间元素</h4><ul><li><p>计数法</p><p>长度n,查找（n - 1) / 2 + 1</p></li><li><p><font color = fledspar>快慢指针法</font></p><p>快指针fast 慢指针slow，首先均指向首结点，每次让慢指针slow后移一个结点，快指针fast后移两个。</p><ul><li>若n为奇数，循环结束时fast指向尾结点，slow指向唯一中间结点。</li><li>若n为偶数，循环结束时fast指向尾结点的前驱结点，slow指向前一个位置中间结点。<h4 id="生成有序链表"><a href="#生成有序链表" class="headerlink" title="生成有序链表"></a>生成有序链表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>      LinkNode* p,* pre,* q;<br>      q = head -&gt; next;<br>      <span class="hljs-keyword">if</span>(q == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>      p = head -&gt; next -&gt; next;<br>      <span class="hljs-keyword">if</span>（p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>      q -&gt; next =<span class="hljs-literal">NULL</span>;<br>      <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span>)<br>      &#123;<br>          q = p -&gt; next;<br>          pre = head;<br>          <span class="hljs-keyword">while</span> (pre -&gt; next != <span class="hljs-literal">NULL</span> &amp;&amp; pre -&gt; next -&gt; exp &gt; p -&gt;exp)<br>              pre = pre -&gt; next;<br>          p -&gt; next = pre -&gt; next;<br>          pre -&gt; next = p;<br>          p = q;<br>      &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><blockquote><p>LeetCode 24 两两交换链表中的结点</p></blockquote><ul><li>递归实现<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function">ListNode* <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span> || head-&gt;next == <span class="hljs-literal">nullptr</span>) &#123;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            ListNode* newHead = head-&gt;next;<br>            head-&gt;next = <span class="hljs-built_in">swapPairs</span>(newHead-&gt;next);<br>            newHead-&gt;next = head;<br>            <span class="hljs-keyword">return</span> newHead;<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>时间复杂度：O(n)</li></ul><p>空间复杂度：O(n) 主要取决于递归调用的栈空间</p><ul><li>迭代<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>            ListNode dummyHead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>            dummyHead.next = head;<br>            ListNode temp = dummyHead;<br>            <span class="hljs-keyword">while</span> (temp.next != null &amp;&amp; temp.next.next != null) &#123;<br>                ListNode node1 = temp.next;<br>                ListNode node2 = temp.next.next;<br>                temp.next = node2;<br>                node1.next = node2.next;<br>                node2.next = node1;<br>                temp = node1;<br>            &#125;<br>            <span class="hljs-keyword">return</span> dummyHead.next;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>时间复杂度：O(n)</li></ul><p>空间复杂度：O(1)</p><h4 id="逆置—void-Reverse（LinkList-amp-L"><a href="#逆置—void-Reverse（LinkList-amp-L" class="headerlink" title="逆置—void Reverse（LinkList &amp;L)"></a>逆置—void Reverse（LinkList<T> &amp;L)</h4><ul><li>头插法建表空间复杂度O(1)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function">  <span class="hljs-type">void</span> <span class="hljs-title">Reverse1</span><span class="hljs-params">(LinkList&lt;T&gt;&amp; L)</span></span><br><span class="hljs-function">  </span>&#123;<br>      LinkNode&lt;T&gt;* p = L.head -&gt; next,*q;<br>      L.head -&gt; next = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//</span><br>      <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span>)<br>      &#123;<br>          q = p -&gt; next;<br>          p -&gt; next = L.head -&gt; next;<br>          L.head -&gt; next = p;<br>          p = q;<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>当L为空或只有一个结点时返回，两个结点时直接逆置，三个及以上结点时，采用三个同步指针p、q、r,操作如图所示</li></ul><p><img src="https://github.com/sunnyibunny/sunnyibunny.github.io/blob/84ba5d26d467093d7a9343bc9044cd44bbad99e2/img/drawio.png" alt="img/drawio.png" title="img/drawio.png"></p><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DLinkNode</span><br>    &#123;<br>        T data;<br>        DLinkNode&lt;T&gt;* next;<br>        DLinkNode&lt;T&gt;* prior;<br>        <span class="hljs-built_in">DLinkNode</span>():<span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>),<span class="hljs-built_in">prior</span>(<span class="hljs-literal">NULL</span>)&#123;&#125;;<br>        <span class="hljs-built_in">DLinkNode</span>(T d):<span class="hljs-built_in">data</span>(d),<span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>),<span class="hljs-built_in">prior</span>(<span class="hljs-literal">NULL</span>)&#123;&#125;;<br>    &#125;;<br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DLinkList</span><br>    &#123;<br>        <span class="hljs-keyword">public</span>:<br>        CLinkNode&lt;T&gt;* dhead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="插入结点"><a href="#插入结点" class="headerlink" title="插入结点"></a>插入结点</h4><p>p后插入s</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    s -&gt;next = p -&gt; next;<br>    <span class="hljs-keyword">if</span>(p -&gt; next != <span class="hljs-literal">NULL</span>)p -&gt; next -&gt; prior = s;<span class="hljs-comment">//需先判断是不是尾结点</span><br>    p -&gt; next = s;<br>    s -&gt; prior = p;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    p -&gt; prior -&gt; next = p -&gt; next;<br>    p -&gt; next -&gt; prior = p -&gt; prior;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><h3 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClinkList</span><br>    &#123;<br>    <span class="hljs-keyword">public</span>:<br>        LinkNode&lt;T&gt;* head;<br>        <span class="hljs-built_in">CLinkList</span>()<br>        &#123;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">LinkNode</span>&lt;T&gt;();<br>            head -&gt; next = head;<br>        &#125; <br>        ~<span class="hljs-built_in">CLinkList</span>()<br>        &#123;<br>            LinkNode&lt;T&gt;*pre,*p;<br>            pre = head;p = pre -&gt; next;<br>            <span class="hljs-keyword">while</span>(p != head)<span class="hljs-comment">//尾结点满足的条件</span><br>            &#123;<br>                <span class="hljs-keyword">delete</span> pre;<br>                pre = p;p = p -&gt; next;<br>            &#125;<br>            <span class="hljs-keyword">delete</span> pre;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><h4 id="约瑟夫问题（Joseph）"><a href="#约瑟夫问题（Joseph）" class="headerlink" title="约瑟夫问题（Joseph）"></a>约瑟夫问题（Joseph）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Child</span>        <span class="hljs-comment">//小孩结点类型</span><br>&#123;<br><span class="hljs-type">int</span> no;                     <span class="hljs-comment">//小孩编号</span><br>Child *next;<span class="hljs-comment">//下一个结点指针 </span><br><span class="hljs-built_in">Child</span>(<span class="hljs-type">int</span> d):<span class="hljs-built_in">no</span>(d),<span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<span class="hljs-comment">//构造函数</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Joseph</span>   <span class="hljs-comment">//求解约瑟夫问题类</span><br>&#123;<br><span class="hljs-type">int</span> n,m;<br>Child *first;<span class="hljs-comment">//小孩循环单链表的首结点 </span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Joseph</span>(<span class="hljs-type">int</span> n1,<span class="hljs-type">int</span> m1):<span class="hljs-built_in">n</span>(n1),<span class="hljs-built_in">m</span>(m1) &#123;&#125;<span class="hljs-comment">//构造函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateList</span><span class="hljs-params">()</span><span class="hljs-comment">//创建小孩循环单链表 </span></span><br><span class="hljs-function"></span>&#123;<br>first=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Child</span>(<span class="hljs-number">1</span>);            <span class="hljs-comment">//循环单链表首结点</span><br>     Child *r=first,*p;<span class="hljs-comment">//r为尾结点指针 </span><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>      &#123;p=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Child</span>(i);<span class="hljs-comment">//建立一个编号为i的新结点p</span><br>        r-&gt;next=p;<span class="hljs-comment">//将p结点链到末尾</span><br>        r=p;<br>        &#125;<br>   r-&gt;next=first;<span class="hljs-comment">//构成一个首结点为first的循环单链表</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Jsequence</span><span class="hljs-params">()</span><span class="hljs-comment">//输出约瑟夫序列</span></span><br><span class="hljs-function"></span>&#123;<br>Child *p,*q; <br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//共出列n个小孩</span><br>     &#123;p=first;<br>        <span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (j!=m)    <span class="hljs-comment">//从first结点开始报数，报到第m个结点</span><br>         &#123;j++;<span class="hljs-comment">//报数递增</span><br>            p=p-&gt;next;    <span class="hljs-comment">//移到下一个结点</span><br>         &#125;<br>         cout &lt;&lt; p-&gt;no &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;   <span class="hljs-comment">//该结点的小孩出列</span><br>q=p-&gt;next;<span class="hljs-comment">//q指向结点p的后继结点</span><br>         p-&gt;no=q-&gt;no;<span class="hljs-comment">//将结点q的值复制到结点p </span><br>         p-&gt;next=q-&gt;next;<span class="hljs-comment">//删除q结点</span><br>         <span class="hljs-keyword">delete</span> q;<br>         first=p;<span class="hljs-comment">//从结点p重新开始</span><br>    &#125;<br>cout &lt;&lt; endl;<br>&#125;<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h2><h3 id="基本操作-3"><a href="#基本操作-3" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DLinkNode</span><span class="hljs-comment">//循环双链表结点类型 </span><br>&#123;<br>T data;<span class="hljs-comment">//存放数据元素</span><br>DLinkNode&lt;T&gt; *next;<span class="hljs-comment">//指向后继结点的指针</span><br>DLinkNode&lt;T&gt; *prior;<span class="hljs-comment">//指向前驱结点的指针 </span><br><span class="hljs-built_in">DLinkNode</span>():<span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>),<span class="hljs-built_in">prior</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<span class="hljs-comment">//构造函数 </span><br><span class="hljs-built_in">DLinkNode</span>(T d):<span class="hljs-built_in">data</span>(d),<span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>),<span class="hljs-built_in">prior</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<span class="hljs-comment">//重载构造函数 </span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CDLinkList</span><span class="hljs-comment">//循环双链表类</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>DLinkNode&lt;T&gt; *dhead;<span class="hljs-comment">//循环双链表头结点</span><br><span class="hljs-built_in">CDLinkList</span>() <span class="hljs-comment">//构造函数,创建一个空循环双链表</span><br>&#123;<br>dhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DLinkNode</span>&lt;T&gt;();<br>dhead-&gt;next=dhead;<span class="hljs-comment">//构成循环的空链表</span><br>dhead-&gt;prior=dhead; <br>&#125;<br>~<span class="hljs-built_in">CDLinkList</span>() <span class="hljs-comment">//析构函数,销毁循环双链表</span><br>&#123;<br>DLinkNode&lt;T&gt; *pre,*p;<br>pre=dhead;p=pre-&gt;next;<br><span class="hljs-keyword">while</span> (p!=dhead)<span class="hljs-comment">//用p遍历结点并释放其前驱结点 </span><br>&#123;<br><span class="hljs-keyword">delete</span> pre;<span class="hljs-comment">//释放pre结点 </span><br>pre=p; p=p-&gt;next;<span class="hljs-comment">//pre,p同步后移一个结点 </span><br>&#125;<br><span class="hljs-keyword">delete</span> pre;<span class="hljs-comment">//p等于dhead时pre指向尾结点,此时释放尾结点</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Vector向量容器"><a href="#Vector向量容器" class="headerlink" title="Vector向量容器"></a>Vector向量容器</h2><p>#include&lt;Vector&gt;</p><ul><li>可变长的动态数组，可根据下标随机访问/修改某个元素。</li><li>如果动态分配的存储空间大于实际需要的空间，则不必重新分配空间，此时添加新元素的时间为常数；反之，则按两倍扩容，此时添加新元素的时间和数组中的元素个数成正比。<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3></li><li>vector<int> a(10); //定义了10个整型元素的向量（尖括号中为元素类型名，它可以是任何合法的数据类型），但没有给出初值，其值是不确定的</li><li>vector<int> a(10,1); //定义了10个整型元素的向量,且给出每个元素的初值为1</li><li>vector<int> a(b); //用b向量来创建a向量，整体复制性赋值</li><li>vector<int> a(b.begin(),b.begin+3); //定义了a值为b中第0个到第2个（共3个）元素</li><li>int b[7]={1,2,3,4,5,9,8};vector<int> a(b,b+7); //从数组中获得初值</li></ul><h3 id="重要操作"><a href="#重要操作" class="headerlink" title="重要操作"></a>重要操作</h3><ul><li>a.back(); //返回a的最后一个元素</li><li>a.front(); //返回a的第一个元素</li><li>a.begin();//返回第一个元素的指针</li><li>a.end();//返回最后一个元素后一位置的指针</li><li>a[i]; //返回a的第i个元素，当且仅当a[i]存在,<font  color= fledspar>下标只能获取已存在的元素</font></li></ul><hr><ul><li>a.clear(); //清空a中的元素</li><li>a.empty(); //判断a是否为空，空则返回ture,不空则返回false</li><li>a.pop_back(); //删除a向量的最后一个元素</li><li>a.erase(a.begin()+1,a.begin()+3); //删除a中第1个（从第0个算起）到第2个元素，也就是说删除的元素从a.begin()+1算起（包括它）一直到a.begin()+3（不包括）</li><li>a.push_back(5); //在a的最后一个向量后插入一个元素，其值为5</li><li>a.insert(a.begin()+1,5); //在a的第1个元素（从第0个算起）的位置插入数值5，如a为1,2,3,4，插入元素后为1,5,2,3,4</li><li>a.insert(a.begin()+1,3,5); //在a的第1个元素（从第0个算起）的位置插入3个数，其值都为5</li><li>a.insert(a.begin()+1,b+3,b+6); //b为数组，在a的第1个元素（从第0个算起）的位置插入b的第3个元素到第5个元素（不包括b+6）</li></ul><hr><ul><li>a.size(); //返回a中元素的个数；</li><li>a.capacity(); //返回a在内存中总共可以容纳的元素个数</li><li>a.resize(10); //将a的现有元素个数调至10个，多则删，少则补，其值随机</li><li>a.resize(10,2); //将a的现有元素个数调至10个，多则删，少则补，其值为2</li><li>a.reserve(100); //将a的容量（capacity）扩充至100，也就是说现在测试a.capacity();的时候返回值是100.这种操作只有在需要给a添加大量数据的时候才显得有意义，因为这将避免内存多次容量扩充操作（当a的容量不足时电脑会自动扩容，当然这必然降低性能） </li></ul><hr><ul><li>a.swap(b); //b为向量，将a中的元素和b中的元素进行整体性交换</li><li>a==b; //b为向量，向量的比较操作还有!=,&gt;=,&lt;=,&gt;,&lt;</li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li><p>内置数据类型<br>sort（p.begin(),p.end())</p><p>默认以less<T>实现递增排序，为实现递减排序，需调用greater<T>函数：sort(p.begin(),p.end(),greater<T>)</p></li><li><p>自定义数据类型</p><ul><li>重载&lt;运算符</li><li>重载函数调用运算符（），通过sort(p.begin(),p.end(),cmp())实现（cmp为结构体）</li></ul></li></ul><h2 id="list链表容器"><a href="#list链表容器" class="headerlink" title="list链表容器"></a>list链表容器</h2><p>循环双链表，不支持随机访问</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><ul><li>list<A> l1;</li><li>list<A> l2(10);</li><li>list<A> l3(10,1.23);</li><li>list<A> l4(a,a + 5);//a为数组</li></ul><h3 id="基本操作-4"><a href="#基本操作-4" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>void push_front(const T&amp; x);    // 头部添加</li><li>void push_back(const T&amp; x);        // 尾部添加</li></ul><ul><li>void pop_front();        // 头部删除</li><li>void pop_back();        // 尾部删除</li><li>void swap(list l1,list l2);</li><li>void remove(const Type&amp; _Val);//删除所有指定值的元素</li><li>void remove_if(cmp);//删除满足cmp条件的元素</li><li>void uniqe();//移除相邻元素</li><li>void reverse();//置逆</li></ul><hr><ul><li>bool empty() const;</li><li>size_type size() const;                // 返回元素个数</li><li>size_type max_size() const;            // 返回list对象最大允许容量</li><li>void resize(size_type n, T x=T());    // 调整list对象的大小</li></ul><hr><p><font color = fredspar>list型容器不提供成员函数at()和操作符operator[],可以使用迭代器进行元素的访问.</font></p><ul><li>begin()        // 返回指向容器中第一个元素的双向迭代器。</li><li>end()        // 返回指向容器中最后一个元素所在位置的下一个位置的双向迭代器。</li><li>rbegin()    // 返回指向最后一个元素的反向双向迭代器。</li><li>rend()        // 返回指向第一个元素所在位置前一个位置的反向双向迭代器。</li></ul><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/10/24/%E9%A1%BA%E5%BA%8F%E8%A1%A8SqList/"/>
    <url>/2023/10/24/%E9%A1%BA%E5%BA%8F%E8%A1%A8SqList/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序表SqList"><a href="#顺序表SqList" class="headerlink" title="顺序表SqList"></a>顺序表SqList</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li><p><strong>SqList类模板</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> initcap = <span class="hljs-number">5</span>;<span class="hljs-comment">//顺序表的初始容量</span><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqList</span><br>    &#123;<br>    <span class="hljs-keyword">public</span>:<br>        T* data;<br>        <span class="hljs-type">int</span> capacity;<span class="hljs-comment">//顺序表的容量</span><br>        <span class="hljs-type">int</span> length;<span class="hljs-comment">//存放顺序表的长度</span><br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>改变顺序表的容量</strong>：void recap(int newcap)    </p><p> 判断newcap的合法性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">recap</span><span class="hljs-params">(<span class="hljs-type">int</span> newcap)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(newcap &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        T* olddata = data;<br>        data = <span class="hljs-keyword">new</span> T[newcap];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; length;i ++)<br>        &#123;<br>            data[i] = olddata[i];<br>        &#125;<br>        <span class="hljs-keyword">delete</span>[]olddata;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>顺序表的建立</strong>：void createList(T a[],int n)</p><p>  <font color = Feldspar>先判断顺序表是否已满（length == capacity)</Font>,如果已满，则扩容。</p></li><li><p><strong>构造函数</strong></p></li><li><p><strong>拷贝构造函数</strong>：</p><p>  <font color = Feldspar>注意仍需为指针data申请空间（data = new T[capacity]）</font></p></li><li><p><strong>析构函数</strong></p></li><li><p><strong>将元素e添加到顺序表末尾</strong>：void Add（T e)</p></li><li><p><strong>求顺序表的长度</strong>：int GetLength()</p></li><li><p><strong>求顺序表中序号为i的元素值</strong>：bool GetElem(i)</p><p>  <font color = Feldspar>先判断i是否合法</font></p></li><li><p><strong>在顺序表插入e作为第i个元素</strong>：bool Insert(int i,T e)</p><p>   <font color = feldspar>先判断i是否合法，再确定是否扩容</font> </p><p>  (recap在插入中仅调用一次，其平摊时间为O（1）)</p></li><li><p><strong>删除第i个元素</strong>：bool Delete（int i)</p><p>   <font color= fredspar> 如果满足缩容条件(length &lt; 1/4 capacity)则缩容</font></p></li><li><p><strong>输出顺序表中所有元素</strong>:void DispList()</p></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li><p><strong>删除其中值为x的值</strong></p><p>以下方法时间复杂度均为O(n),空间复杂度O(1)</p><p>  1.整体建表法：遍历L,将非x的值写入L1(实际上L1可以与L共用空间，只需另设k记录个数即可)。</p><p>  2.元素移动法</p><p>  3.<font color = fledspar>区间划分法</font>：前端为非x的区间，后段为x的区间，分别设置指针从前往后、从后往前遍历，如果不满足，则交换。</p><blockquote><p>Leetcode26:删除排序数组中的重复项</p></blockquote><p>  <font color = fledspar>快慢指针法</font></p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> slow =  <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> fast = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span>(fast != n)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[fast] != nums[fast - <span class="hljs-number">1</span>])<br>            &#123;<br>                nums[slow] = nums[fast];<br>                slow ++;<br>            &#125;<br>            fast ++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>有序顺序表—二路归并</strong></p><p><font color = fledspar>考虑某一路仍未归并完的元素</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>  <span class="hljs-type">int</span> a[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>&#125;;<br>  <span class="hljs-type">int</span> b[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>&#125;;<br>  SqList&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">A</span>(a,<span class="hljs-number">4</span>),<span class="hljs-built_in">B</span>(b,<span class="hljs-number">5</span>),<span class="hljs-built_in">C</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-type">int</span> i =<span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>,k = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>(i &lt; A.length &amp;&amp; j &lt; B.length)<br>  &#123;<br>      <span class="hljs-keyword">if</span>(A.data[i] &lt; B.data[j])<br>      &#123;<br>          C.data[k ++] = A.data[i ++];<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A.data[i] &gt; B.data[j])<br>      &#123;<br>          C.data[k ++] = B.data[j ++];<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>          C.data[k ++] = A.data[i ++];<br>          j ++;<span class="hljs-comment">//需另外判断，否则会重复记入</span><br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">while</span>(i &lt; A.length)<span class="hljs-comment">//如果A中有元素没有归并完，将剩下的元素写入C中</span><br>  &#123;<br>      C.data[k ++] = A.data[i ++];<br>  &#125;<br>  <span class="hljs-keyword">while</span>(j &lt; B.length)<span class="hljs-comment">//B</span><br>  &#123;<br>      C.data[k ++] = B.data[j ++];<br>  &#125;<br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; k;i ++)<br>      cout&lt;&lt;C.data[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>求升序序列A和B的中位数（元素个数均为n)</strong></p><p>二路归并到第n次，归并元素就是中位数（比较两元素较小值）</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串整合</title>
    <link href="/2023/07/15/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B4%E5%90%88/"/>
    <url>/2023/07/15/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="char类型字符数组"><a href="#char类型字符数组" class="headerlink" title="char类型字符数组"></a>char类型字符数组</h2><pre><code class="hljs"> 需包含头文件&lt;cstring.h&gt;</code></pre><ul><li>常用ASCII码</li></ul><pre><code class="hljs">| 数字 | 对应字符 ||:------:|:--------:||32|空格||48|0||65|A||97|a|</code></pre><ul><li>常用函数</li></ul><ol><li><p>strlen()</p><p>原型:<code>size_t strlen(char const* string);</code></p><p>返回有效长度（不包括<code>\0</code>），<code>sizeof()</code>包括<code>\0</code>。</p></li><li><p>strcmp()</p><p>原型：<code>int strcmp(char const *s1, char const *s2, size_t len);</code></p><p> 比较两个字符串：如果s1小于s2，strcmp函数返回一个负值。如果s1大于s2，函数返回一个大于正值。如果两个字符串相等，函数就返回零。</p></li><li><p>strcat()</p><p>原型：<code>char *strcat(char *dst, char const *src,int len);</code></p><p>第一个参数必须是数组名，第二个参数可以是字符串常量。</p></li><li><p>strcpy()</p><p>原型：<code>char *strcpy(char *dst, char const *src);</code></p></li></ol><ul><li>输入函数</li></ul><ol><li><p><code>cin&gt;&gt;</code></p><p>将回车、空格都识别为字符串的结束，只能读入不含空格的字符串。</p></li><li><p><code>cin.get()</code><font color = 'wheat'>（包括空格和回车）</font></p><p>从输入行中取出<font color = 'tan'>一个字符</font>，并将其赋给字符型变量。</p><p><code>cin.get(char ch)</code>或<code>ch = cin.get()</code></p><p> <strong><code>cin.get()</code>可吃掉滞留缓存的<code>\n</code></strong></p></li><li><p><code>getchar()</code><font color = 'wheat'>（包括回车和空格）</font></p><p>读入的是ASCII码，得到的字符可以赋给<font color = 'tan'>一个字符</font>或整型变量，也可以不赋给任何变量，作为表达式一部分。</p></li><li><p><code>cin.getline()</code><font color = 'wheat'>（包括空格）</font></p><p><code>cin.geiline(char *array，int cnt，char ch)</code></p><p> 其中，第一个参数为读入的数组，第二个参数为读入个数，第三个参数为结束字符（该字符不输出）。</p><p>读入<font color = 'tan'>一行字符</font>，将<code>\n</code>丢弃，并替换为<code>\0</code>存入数组。</p></li></ol><h2 id="string类型字符串"><a href="#string类型字符串" class="headerlink" title="string类型字符串"></a>string类型字符串</h2><pre><code class="hljs"> 需包含头文件&lt;string.h&gt;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/16/hello-world/"/>
    <url>/2023/01/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
