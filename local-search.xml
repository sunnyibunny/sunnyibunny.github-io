<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/10/24/%E9%A1%BA%E5%BA%8F%E8%A1%A8SqList/"/>
    <url>/2023/10/24/%E9%A1%BA%E5%BA%8F%E8%A1%A8SqList/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序表SqList"><a href="#顺序表SqList" class="headerlink" title="顺序表SqList"></a>顺序表SqList</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li><p><strong>SqList类模板</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> initcap = <span class="hljs-number">5</span>;<span class="hljs-comment">//顺序表的初始容量</span><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqList</span><br>    &#123;<br>    <span class="hljs-keyword">public</span>:<br>        T* data;<br>        <span class="hljs-type">int</span> capacity;<span class="hljs-comment">//顺序表的容量</span><br>        <span class="hljs-type">int</span> length;<span class="hljs-comment">//存放顺序表的长度</span><br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>改变顺序表的容量</strong>：void recap(int newcap)    </p><p> 判断newcap的合法性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">recap</span><span class="hljs-params">(<span class="hljs-type">int</span> newcap)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(newcap &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        T* olddata = data;<br>        data = <span class="hljs-keyword">new</span> T[newcap];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; length;i ++)<br>        &#123;<br>            data[i] = olddata[i];<br>        &#125;<br>        <span class="hljs-keyword">delete</span>[]olddata;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>顺序表的建立</strong>：void createList(T a[],int n)</p><p>  <font color = Feldspar>先判断顺序表是否已满（length == capacity)</Font>,如果已满，则扩容。</p></li><li><p><strong>构造函数</strong></p></li><li><p><strong>拷贝构造函数</strong>：</p><p>  <font color = Feldspar>注意仍需为指针data申请空间（data = new T[capacity]）</font></p></li><li><p><strong>析构函数</strong></p></li><li><p><strong>将元素e添加到顺序表末尾</strong>：void Add（T e)</p></li><li><p><strong>求顺序表的长度</strong>：int GetLength()</p></li><li><p><strong>求顺序表中序号为i的元素值</strong>：bool GetElem(i)</p><p>  <font color = Feldspar>先判断i是否合法</font></p></li><li><p><strong>在顺序表插入e作为第i个元素</strong>：bool Insert(int i,T e)</p><p>   <font color = feldspar>先判断i是否合法，再确定是否扩容</font> </p><p>  (recap在插入中仅调用一次，其平摊时间为O（1）)</p></li><li><p><strong>删除第i个元素</strong>：bool Delete（int i)</p><p>   <font color= fredspar> 如果满足缩容条件(length &lt; 1/4 capacity)则缩容</font></p></li><li><p><strong>输出顺序表中所有元素</strong>:void DispList()</p></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li><p><strong>删除其中值为x的值</strong></p><p>以下方法时间复杂度均为O(n),空间复杂度O(1)</p><p>  1.整体建表法：遍历L,将非x的值写入L1(实际上L1可以与L共用空间，只需另设k记录个数即可)。</p><p>  2.元素移动法</p><p>  3.<font color = fledspar>区间划分法</font>：前端为非x的区间，后段为x的区间，分别设置指针从前往后、从后往前遍历，如果不满足，则交换。</p><blockquote><p>Leetcode26:删除排序数组中的重复项</p></blockquote><p>  <font color = fledspar>快慢指针法</font></p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> slow =  <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> fast = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span>(fast != n)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[fast] != nums[fast - <span class="hljs-number">1</span>])<br>            &#123;<br>                nums[slow] = nums[fast];<br>                slow ++;<br>            &#125;<br>            fast ++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>有序顺序表—二路归并</strong></p><p><font color = fledspar>考虑某一路仍未归并完的元素</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<br>  <span class="hljs-type">int</span> a[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>&#125;;<br>  <span class="hljs-type">int</span> b[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>&#125;;<br>  SqList&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">A</span>(a,<span class="hljs-number">4</span>),<span class="hljs-built_in">B</span>(b,<span class="hljs-number">5</span>),<span class="hljs-built_in">C</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-type">int</span> i =<span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>,k = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>(i &lt; A.length &amp;&amp; j &lt; B.length)<br>  &#123;<br>      <span class="hljs-keyword">if</span>(A.data[i] &lt; B.data[j])<br>      &#123;<br>          C.data[k ++] = A.data[i ++];<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A.data[i] &gt; B.data[j])<br>      &#123;<br>          C.data[k ++] = B.data[j ++];<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>          C.data[k ++] = A.data[i ++];<br>          j ++;<span class="hljs-comment">//需另外判断，否则会重复记入</span><br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">while</span>(i &lt; A.length)<span class="hljs-comment">//如果A中有元素没有归并完，将剩下的元素写入C中</span><br>  &#123;<br>      C.data[k ++] = A.data[i ++];<br>  &#125;<br>  <span class="hljs-keyword">while</span>(j &lt; B.length)<span class="hljs-comment">//B</span><br>  &#123;<br>      C.data[k ++] = B.data[j ++];<br>  &#125;<br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; k;i ++)<br>      cout&lt;&lt;C.data[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>求升序序列A和B的中位数（元素个数均为n)</strong></p><p>二路归并到第n次，归并元素就是中位数（比较两元素较小值）</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串整合</title>
    <link href="/2023/07/15/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B4%E5%90%88/"/>
    <url>/2023/07/15/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="char类型字符数组"><a href="#char类型字符数组" class="headerlink" title="char类型字符数组"></a>char类型字符数组</h2><pre><code class="hljs"> 需包含头文件&lt;cstring.h&gt;</code></pre><ul><li>常用ASCII码</li></ul><pre><code class="hljs">| 数字 | 对应字符 ||:------:|:--------:||32|空格||48|0||65|A||97|a|</code></pre><ul><li>常用函数</li></ul><ol><li><p>strlen()</p><p>原型:<code>size_t strlen(char const* string);</code></p><p>返回有效长度（不包括<code>\0</code>），<code>sizeof()</code>包括<code>\0</code>。</p></li><li><p>strcmp()</p><p>原型：<code>int strcmp(char const *s1, char const *s2, size_t len);</code></p><p> 比较两个字符串：如果s1小于s2，strcmp函数返回一个负值。如果s1大于s2，函数返回一个大于正值。如果两个字符串相等，函数就返回零。</p></li><li><p>strcat()</p><p>原型：<code>char *strcat(char *dst, char const *src,int len);</code></p><p>第一个参数必须是数组名，第二个参数可以是字符串常量。</p></li><li><p>strcpy()</p><p>原型：<code>char *strcpy(char *dst, char const *src);</code></p></li></ol><ul><li>输入函数</li></ul><ol><li><p><code>cin&gt;&gt;</code></p><p>将回车、空格都识别为字符串的结束，只能读入不含空格的字符串。</p></li><li><p><code>cin.get()</code><font color = 'wheat'>（包括空格和回车）</font></p><p>从输入行中取出<font color = 'tan'>一个字符</font>，并将其赋给字符型变量。</p><p><code>cin.get(char ch)</code>或<code>ch = cin.get()</code></p><p> <strong><code>cin.get()</code>可吃掉滞留缓存的<code>\n</code></strong></p></li><li><p><code>getchar()</code><font color = 'wheat'>（包括回车和空格）</font></p><p>读入的是ASCII码，得到的字符可以赋给<font color = 'tan'>一个字符</font>或整型变量，也可以不赋给任何变量，作为表达式一部分。</p></li><li><p><code>cin.getline()</code><font color = 'wheat'>（包括空格）</font></p><p><code>cin.geiline(char *array，int cnt，char ch)</code></p><p> 其中，第一个参数为读入的数组，第二个参数为读入个数，第三个参数为结束字符（该字符不输出）。</p><p>读入<font color = 'tan'>一行字符</font>，将<code>\n</code>丢弃，并替换为<code>\0</code>存入数组。</p></li></ol><h2 id="string类型字符串"><a href="#string类型字符串" class="headerlink" title="string类型字符串"></a>string类型字符串</h2><pre><code class="hljs"> 需包含头文件&lt;string.h&gt;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/16/hello-world/"/>
    <url>/2023/01/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
